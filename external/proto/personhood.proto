syntax = "proto2";
package personhood;

import "byzcoin.proto";
import "onet.proto";

option java_package = "ch.epfl.dedis.lib.proto";
option java_outer_classname = "Personhood";

// PartyList can either store a new party in the list, or just return the list of
// available parties.
message PartyList {
  optional Party newparty = 1;
  optional bool wipeparties = 2;
}

// PartyListResponse holds a list of all known parties so far. Only parties in PreBarrier
// state are listed.
message PartyListResponse {
  repeated Party parties = 1;
}

// Party represents everything necessary to find a party in the ledger.
message Party {
  // Roster is the list of nodes responsible for the byzcoin instance
  required onet.Roster roster = 1;
  // ByzCoinID represents the ledger where the pop-party is stored.
  required bytes byzcoinid = 2;
  // InstanceID is where to find the party in the ledger.
  required bytes instanceid = 3;
}

// RoPaSciList can either store a new RockPaperScissors in the list, or just
// return the available RoPaScis.
message RoPaSciList {
  optional RoPaSci newropasci = 1;
  optional bool wipe = 2;
}

// RoPaSciListResponse returns a list of all known, unfinished RockPaperScissors
// games.
message RoPaSciListResponse {
  repeated RoPaSci ropascis = 1;
}

// RoPaSci represents one rock-paper-scissors game.
message RoPaSci {
  required bytes byzcoinid = 1;
  required bytes ropasciid = 2;
}

// StringReply can be used by all calls that need a string to be returned
// to the caller.
message StringReply {
  required string reply = 1;
}

// RoPaSciStruct holds one Rock Paper Scissors event
message RoPaSciStruct {
  required string description = 1;
  required byzcoin.Coin stake = 2;
  required bytes firstplayerhash = 3;
  optional sint32 firstplayer = 4;
  optional sint32 secondplayer = 5;
  optional bytes secondplayeraccount = 6;
}

// CredentialStruct holds a slice of credentials.
message CredentialStruct {
  repeated Credential credentials = 1;
}

// Credential represents one identity of the user.
message Credential {
  required string name = 1;
  repeated Attribute attributes = 2;
}

// Attribute stores one specific attribute of a credential.
message Attribute {
  required string name = 1;
  required bytes value = 2;
}

// SpawnerStruct holds the data necessary for knowing how much spawning
// of a certain contract costs.
message SpawnerStruct {
  required byzcoin.Coin costdarc = 1;
  required byzcoin.Coin costcoin = 2;
  required byzcoin.Coin costcredential = 3;
  required byzcoin.Coin costparty = 4;
  required bytes beneficiary = 5;
  optional byzcoin.Coin costropasci = 6;
  optional byzcoin.Coin costcwrite = 7;
  optional byzcoin.Coin costcread = 8;
}

// PopPartyStruct is the data that is stored in a pop-party instance.
message PopPartyStruct {
  // State has one of the following values:
  // 1: it is a configuration only
  // 2: scanning in progress
  // 3: it is a finalized pop-party
  required sint32 state = 1;
  // Organizers is the number of organizers responsible for this party
  required sint32 organizers = 2;
  // Finalizations is a slice of darc-identities who agree on the list of
  // public keys in the FinalStatement.
  repeated string finalizations = 3;
  // Description holds the name, date and location of the party and is available
  // before the barrier point.
  required PopDesc description = 4;
  // Attendees is the slice of public keys of all confirmed attendees
  required Attendees attendees = 5;
  // Miners holds all tags of the linkable ring signatures that already
  // mined this party.
  repeated LRSTag miners = 6;
  // How much money to mine
  required uint64 miningreward = 7;
  // Previous is the link to the instanceID of the previous party, it can be
  // nil for the first party.
  optional bytes previous = 8;
  // Next is a link to the instanceID of the next party. It can be
  // nil if there is no next party.
  optional bytes next = 9;
}

// PopDesc holds the name, date and a roster of all involved conodes.
message PopDesc {
  // Name of the party.
  required string name = 1;
  // Purpose of the party
  required string purpose = 2;
  // DateTime of the party. It is stored as seconds since the Unix-epoch, 1/1/1970
  required uint64 datetime = 3;
  // Location of the party
  required string location = 4;
}

// FinalStatement is the final configuration holding all data necessary
// for a verifier.
message FinalStatement {
  // Desc is the description of the pop-party.
  optional PopDesc desc = 1;
  // Attendees holds a slice of all public keys of the attendees.
  required Attendees attendees = 2;
}

// Attendees is a slice of points of attendees' public keys.
message Attendees {
  repeated bytes keys = 1;
}

// LRSTag is the tag of the linkable ring signature sent in by a user.
message LRSTag {
  required bytes tag = 1;
}

// Poll allows for adding, listing, and answering to storagePolls
message Poll {
  required bytes byzcoinid = 1;
  optional PollStruct newpoll = 2;
  optional PollList list = 3;
  optional PollAnswer answer = 4;
}

// PollList returns all known storagePolls for this byzcoinID
message PollList {
  repeated bytes partyids = 1;
}

// PollAnswer stores one answer for a poll. It needs to be signed with a Linkable Ring Signature
// to proof that the choice is unique. The context for the LRS must be
//   'Poll' + ByzCoinID + PollID
// And the message must be
//   'Choice' + byte(Choice)
message PollAnswer {
  required bytes pollid = 1;
  required sint32 choice = 2;
  required bytes lrs = 3;
}

// PollStruct represents one poll with answers.
message PollStruct {
  required bytes personhood = 1;
  optional bytes pollid = 2;
  required string title = 3;
  required string description = 4;
  repeated string choices = 5;
  repeated PollChoice chosen = 6;
}

// PollChoice represents one choice of one participant.
message PollChoice {
  required sint32 choice = 1;
  required bytes lrstag = 2;
}

// PollResponse is sent back to the client and contains all storagePolls known that
// still have a reward left. It also returns the coinIID of the pollservice
// itself.
message PollResponse {
  repeated PollStruct polls = 1;
}

// Capabilities returns what the service is able to do.
message Capabilities {
}

// CapabilitiesResponse is the response with the endpoints and the version of each
// endpoint. The versioning is a 24 bit value, that can be interpreted in hexadecimal
// as the following:
//   Version = [3]byte{xx, yy, zz}
//   - xx - major version - incompatible
//   - yy - minor version - downwards compatible. A client with a lower number will be able
//     to interact with this server
//   - zz - patch version - whatever suits you - higher is better, but no incompatibilities
message CapabilitiesResponse {
  repeated Capability capabilities = 1;
}

// Capability is one endpoint / version pair
message Capability {
  required string endpoint = 1;
  required bytes version = 2;
}

// UserLocation is the moment a user has been at a certain location.
message UserLocation {
  required bytes publickey = 1;
  optional bytes credentialiid = 2;
  optional CredentialStruct credential = 3;
  optional string location = 4;
  required sint64 time = 5;
}

// Meetup is sent by a user who wants to discover who else is around.
message Meetup {
  optional UserLocation userlocation = 1;
  optional bool wipe = 2;
}

// MeetupResponse contains all users from the last x minutes.
message MeetupResponse {
  repeated UserLocation users = 1;
}
